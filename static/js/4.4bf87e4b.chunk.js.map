{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","user","id","className","s","dialog","to","activeClassName","active","name","MessageItem","author","friendMessage","moveRight","circul","textMessage","message","likesCount","maxLength12","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","users","dialogsData","forEach","item","push","messages","messagesData","index","Message","dialogs","dialogsItems","values","dispatch","console","log","newMessageBody","sendMessage","reset","compose","connect","state","newMessageText","messagesPage","sendMessageActionCreator","withAuthRedirect"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,OAAS,wBAAwB,OAAS,wBAAwB,UAAY,2BAA2B,cAAgB,+BAA+B,UAAY,2BAA2B,OAAS,wBAAwB,YAAc,6BAA6B,SAAW,4B,kGCa9YC,EAVI,SAACC,GAClB,IAAIC,EAAI,mBAAeD,EAAME,KAAKC,IAElC,OACE,qBAAKC,UAAS,UAAKC,IAAEC,QAArB,SACE,cAAC,IAAD,CAASC,GAAIN,EAAMO,gBAAiBH,IAAEI,OAAtC,SAA+CT,EAAME,KAAKQ,UCYjDC,EAlBK,SAACX,GAKnB,OAEE,sBAAKI,UAAiC,OAAtBJ,EAAME,KAAKU,OAAkBP,IAAEQ,cAAgBR,IAAES,UAAjE,UACE,qBAAKV,UAAWC,IAAEU,SAClB,sBAAKX,UAAWC,IAAEW,YAAlB,UACChB,EAAME,KAAKe,QADZ,KACuBjB,EAAME,KAAKgB,kB,yCC6ClCC,EAAcC,YAAiB,IAoB/BC,EAAsBC,YAAU,CAACC,KAAM,eAAjBD,EAlBL,SAACtB,GACtB,OACE,uBAAMwB,SAAUxB,EAAMyB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXlB,KAAM,iBACNmB,YAAY,qBACZC,SAAU,CAACC,IAAUZ,OAGzB,8BACE,kDAQOa,EAxEC,SAAChC,GAEf,IAAIiC,EAAQ,GACZjC,EAAMkC,YAAYC,SAAQ,SAACC,GACzBH,EAAMI,KAAK,cAAC,EAAD,CAAYnC,KAAMkC,GAAWA,EAAKjC,QAG/C,IAAImC,EAAW,GACftC,EAAMuC,aAAaJ,SAAQ,SAACC,EAAMI,GAChCF,EAASD,KAAK,cAACI,EAAD,CAAavC,KAAMkC,GAAWI,OAS9C,OACE,sBAAKpC,UAAWC,IAAEqC,QAAlB,UACE,qBAAKtC,UAAWC,IAAEsC,aAAlB,SACGV,IAEH,sBAAK7B,UAAWC,IAAEiC,SAAlB,UACGA,EACD,cAACjB,EAAD,CAAqBG,SAbP,SAACoB,EAAQC,GAC3BC,QAAQC,IAAIH,EAAOI,gBACnBhD,EAAMiD,YAAYL,EAAOI,gBACzBH,EAASK,YAAM,0B,gBCwCJC,sBACfC,aAjBsB,SAACC,GACrB,MAAO,CACLC,eAAgBD,EAAME,aAAaD,eACnCpB,YAAamB,EAAME,aAAarB,YAChCK,aAAcc,EAAME,aAAahB,iBAIZ,SAACM,GACxB,MAAO,CACLI,YAAa,SAACD,GACZH,EAASW,YAAyBR,SAOxCS,IAFeN,CAGbnB","file":"static/js/4.4bf87e4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"messages\":\"Dialogs_messages__1w_Up\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"myMessage\":\"Dialogs_myMessage__2R5rm\",\"friendMessage\":\"Dialogs_friendMessage__32WIG\",\"moveRight\":\"Dialogs_moveRight__1xW9H\",\"circul\":\"Dialogs_circul__2YIDt\",\"textMessage\":\"Dialogs_textMessage__36q_n\",\"textarea\":\"Dialogs_textarea__PRKXN\"};","import React from \"react\";\nimport s from './../Dialogs.module.css'\nimport { NavLink } from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n  let path = `/dialogs/${props.user.id}`\n\n  return (\n    <div className={`${s.dialog}`}>\n      <NavLink to={path} activeClassName={s.active}>{props.user.name}</NavLink>\n    </div>\n  )\n}\n\nexport default DialogItem;","import React from \"react\";\nimport s from './../Dialogs.module.css'\n\nconst MessageItem = (props) => {\n  // let className = {s.myMessage}\n  // if (props.user.author !== \"me\") {\n  //   className = {s.friendMessage}\n  // }\n  return (\n    \n    <div className={props.user.author !== \"me\" ? s.friendMessage : s.moveRight}>\n      <div className={s.circul}></div>\n      <div className={s.textMessage}>\n      {props.user.message}  {props.user.likesCount}\n      </div>\n    </div>\n\n  \n  )\n}\n\nexport default MessageItem;","import React from \"react\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport MessageItem from \"./Message/Message\";\nimport s from './Dialogs.module.css'\nimport { Field, reduxForm, reset } from \"redux-form\";\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\n\nconst Dialogs = (props) => {\n\n  let users = [];\n  props.dialogsData.forEach((item) => {\n    users.push(<DialogItem user={item} key={item.id}/>);\n  })\n\n  let messages = [];\n  props.messagesData.forEach((item, index) => {\n    messages.push(<MessageItem user={item} key={index}/>);\n  })\n\n  let addNewMessage = (values, dispatch) => {\n    console.log(values.newMessageBody);\n    props.sendMessage(values.newMessageBody);\n    dispatch(reset(\"sendMessage\"))\n  }\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>\n        {users}\n      </div>\n      <div className={s.messages}>\n        {messages}\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\n      </div>\n    </div>\n  )\n  // return (\n  //   <div className={s.dialogs}>\n  //     <div className={s.dialogsItems}>\n  //       {users}\n  //     </div>\n  //     <div className={s.messages}>\n  //       {messages}\n  //       <textarea \n  //         value={props.newMessageText}\n  //         onChange={onChangeMessage}\n  //         className={s.textarea + ' ' + s.moveRight} \n  //         placeholder='write your message'\n  //       />\n  //       <div className={s.moveRight}>\n  //         <button onClick={onSendMessage}>send</button>\n  //       </div>\n  //     </div>\n  //   </div>\n  // )\n}\n\nconst maxLength12 = maxLengthCreator(12)\n\nconst AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field \n          component={Textarea} \n          name={'newMessageBody'} \n          placeholder='write your message'\n          validate={[required, maxLength12]}\n        />\n      </div>\n      <div>\n        <button>send</button>\n      </div>\n    </form>\n  )\n}\n\nconst AddMessageFormRedux = reduxForm({form: 'sendMessage'})(AddMessageForm)\n\nexport default Dialogs","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {sendMessageActionCreator} from '../../redux/dialogsReducer'\nimport Dialogs from \"./Dialogs\";\nimport withAuthRedirect from '../../hoc/withAuthRedirect'\nimport { compose } from \"redux\";\n\n//пример использования контекста до внедрения redux provider\n\n// const DialogsContainer = () => {\n\n  \n//   return (\n//     <StoreContext.Consumer> \n//       { (store) => {\n        \n        \n//         let sendMessage = () => {\n//           let action = sendMessageActionCreator();\n//           store.dispatch(action)\n//         }\n      \n//         let onChangeMessage = (text) => {\n//           let action = updateNewMessageTextActionCreator(text);\n//           store.dispatch(action);\n//         }\n\n//         return (\n//           <Dialogs \n//           sendMessage={sendMessage} \n//           onChangeMessage={onChangeMessage}\n//           newMessageText={store.getState().messagesPage.newMessageText}\n//           dialogsData={store.getState().messagesPage.dialogsData}\n//           messagesData={store.getState().messagesPage.messagesData}\n//           />\n\n//         )\n//       }\n//     }\n//     </StoreContext.Consumer>\n//   )\n// }\n\n//Ниже способ с использованием библиотеки React Redux\n\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\n\nlet mapStateToProps = (state) => {\n  return {\n    newMessageText: state.messagesPage.newMessageText,\n    dialogsData: state.messagesPage.dialogsData,\n    messagesData: state.messagesPage.messagesData,\n\n  }\n}\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageActionCreator(newMessageBody))\n    },\n  }\n}\n\nexport default compose(\nconnect(mapStateToProps,mapDispatchToProps),\nwithAuthRedirect\n)(Dialogs)"],"sourceRoot":""}